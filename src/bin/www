#!/usr/bin/env node

/*
 * This file is part of The HostLab Software.
 *
 * Copyright 2018
 *     Adrian Beckmann, Denis Paris, Dominic Claßen,
 *     Jan Wystub, Manuel Eder, René Heinen, René Neißer.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Configure Environment
 */
require('dotenv').config();

/**
 * Module dependencies.
 */

const app = require('../app');
const log = require('debug')('hostlab:server');
const http = require('http');

/**
 * Since App gets registered by RedBird, just set Settings and store in Express.
 */

const port = normalizePort(3000);
app.set('port', port);

const host = process.env.HOSTLAB_DOMAIN || process.env.HOSTLAB_IP;
app.set('host', host);

const proxy = require('../common/connections').proxy;
proxy.register(host, `localhost:${ port }`);

function mongoResolver(host, url, req) {
	if (/^\/mongo/.test(url)) {
		require('../common/docker').
			docker.
			getContainer(req.user.containers.mongoExpress.id).
			inspect((err, data) => {
				if (err) {
					return err;
				}
				const mongoExpressContainerIP = data.NetworkSettings.Networks.hostlab_users.IPAddress;
				log(mongoExpressContainerIP);
				return `${mongoExpressContainerIP}:8081`;
			});
	}
}
mongoResolver.priority = 100;
proxy.addResolver(mongoResolver);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Because the application will not be exposed as is,
 * just listen on provided port and only on localhost.
 */

server.listen(port, 'localhost');
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	const port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	const bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	const addr = server.address();
	const bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	log('Listening on ' + bind);
}
